# Generated by Django 2.2 on 2019-06-04 20:33

from django.conf import settings
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import tagulous.models.fields
import tagulous.models.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('civility', models.CharField(choices=[('-', 'Non précisé'), ('M.', 'M.'), ('Mme', 'Mme'), ('Mlle', 'Mlle')], default='-', max_length=10, verbose_name='Civilité')),
                ('firstname', models.CharField(blank=True, max_length=50, verbose_name='Prénom')),
                ('lastname', models.CharField(blank=True, max_length=50, verbose_name='Nom')),
                ('email', models.EmailField(blank=True, max_length=50, verbose_name='Email')),
                ('address1', models.CharField(blank=True, max_length=150, verbose_name='Adresse 1')),
                ('address2', models.CharField(blank=True, max_length=150, verbose_name='Adresse 2')),
                ('address3', models.CharField(blank=True, max_length=150, verbose_name='Adresse 3')),
                ('zipcode', models.CharField(blank=True, max_length=50, verbose_name='Code Postal')),
                ('town', models.CharField(blank=True, max_length=50, verbose_name='Ville')),
                ('country', models.CharField(blank=True, max_length=50, verbose_name='Pays')),
                ('phone', models.CharField(blank=True, max_length=500, verbose_name='Téléphone')),
                ('phone_mobile', models.CharField(blank=True, max_length=50, verbose_name='Mobile')),
                ('fax', models.CharField(blank=True, max_length=50, verbose_name='Fax')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('last_modification', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('confirmed', models.BooleanField(default=True, verbose_name='Contact confirmé dans phplist')),
                ('blacklisted', models.BooleanField(default=False, verbose_name='Mis en liste noire dans phplist')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='FileImport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('description', models.CharField(blank=True, max_length=100, verbose_name='Description')),
                ('imported_file', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/media/imported_files'), upload_to='', verbose_name='Fichier à importer')),
                ('columns_found', models.CharField(blank=True, max_length=10000, verbose_name="Colonnes trouvées dans l'import")),
                ('columns_not_found', models.CharField(blank=True, max_length=10000, verbose_name="Colonnes non trouvées dans l'import")),
                ('columns_not_used', models.CharField(blank=True, max_length=10000, verbose_name="Colonnes exédentaires dans l'import")),
                ('contacts_not_updated', models.ManyToManyField(blank=True, related_name='fileimport_contacts_not_updated', to='fac.Contact', verbose_name='Contacts non mises à jour')),
            ],
            options={
                'verbose_name': "Fichier d'import",
                'verbose_name_plural': "Fichiers d'import",
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='GlobalTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
                ('description', models.CharField(blank=True, max_length=100, verbose_name='Description')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='Tagulous_MemberOfOrganization_competencies_tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_organization', models.CharField(choices=[('AgenceLocale', 'Agence Locale'), ('Association', 'Association'), ('AssociationIERA', 'Association membre IERA'), ('Bailleur', 'Bailleur'), ('Collectivity', 'Collectivité'), ('Company', 'Entreprise'), ('cooperative', 'Coopérative'), ('Culture', 'Culture'), ('Education', 'Éducation'), ('Media', 'Média'), ('Syndicat', 'Syndicat'), ('UNKNOWN', 'Non précisée')], default='UNKNOWN', max_length=50, verbose_name="Type d'organisation")),
                ('name', models.CharField(max_length=250, unique=True, verbose_name='Nom')),
                ('reference', models.CharField(blank=True, help_text='Référence interne', max_length=250, verbose_name='Référence')),
                ('address1', models.CharField(blank=True, max_length=150, verbose_name='Adresse 1')),
                ('address2', models.CharField(blank=True, max_length=150, verbose_name='Adresse 2')),
                ('address3', models.CharField(blank=True, max_length=150, verbose_name='Adresse 3')),
                ('zipcode', models.CharField(blank=True, max_length=50, verbose_name='Code Postal')),
                ('town', models.CharField(blank=True, max_length=50, verbose_name='Ville')),
                ('country', models.CharField(blank=True, max_length=50, verbose_name='Pays')),
                ('email', models.EmailField(blank=True, max_length=50, verbose_name='Email')),
                ('website', models.URLField(blank=True, verbose_name='Site WEB')),
                ('phone', models.CharField(blank=True, max_length=500, verbose_name='Téléphone')),
                ('fax', models.CharField(blank=True, max_length=50, verbose_name='Fax')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('last_modification', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('fileimport', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fac.FileImport', verbose_name="Lié à un fichier d'import")),
                ('referent', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Liste de tags séparés par des virgules', initial='', protect_all=True, related_name='referent_tag', space_delimiter=False, to='fac.GlobalTag', verbose_name='Réferent')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Liste de tags séparés par des virgules', initial='', protect_all=True, space_delimiter=False, to='fac.GlobalTag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NoteOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('note', models.TextField(max_length=15000, verbose_name='Note')),
                ('reminder_date', models.DateField(blank=True, null=True, verbose_name='Date de rappel')),
                ('reminder_done', models.BooleanField(default=False, verbose_name='Rappel traité')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fac.Organization', verbose_name='Organization')),
                ('reminder_persons', models.ManyToManyField(blank=True, default=None, related_name='note_organization', to=settings.AUTH_USER_MODEL, verbose_name='Qui rappeler ?')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Liste de tags séparés par des virgules', initial='', protect_all=True, space_delimiter=False, to='fac.GlobalTag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Note de contact',
                'verbose_name_plural': 'Notes de contact',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='NoteContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('note', models.TextField(max_length=15000, verbose_name='Note')),
                ('reminder_date', models.DateField(blank=True, null=True, verbose_name='Date de rappel')),
                ('reminder_done', models.BooleanField(default=False, verbose_name='Rappel traité')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fac.Contact', verbose_name='Contact')),
                ('reminder_persons', models.ManyToManyField(blank=True, default=None, related_name='note_person', to=settings.AUTH_USER_MODEL, verbose_name='Qui rappeler ?')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Liste de tags séparés par des virgules', initial='', protect_all=True, space_delimiter=False, to='fac.GlobalTag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Note de contact',
                'verbose_name_plural': 'Notes de contact',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='MemberOfOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_address_from_organization', models.BooleanField(default=True, verbose_name="Utiliser l'adresse de l'organisme")),
                ('title_in_organization', models.CharField(blank=True, default='', max_length=50, verbose_name="Titre dans l'organisation")),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('destruction_date', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Date de destruction')),
                ('last_modification', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('competencies_tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Liste de tags séparés par des virgules', space_delimiter=False, to='fac.Tagulous_MemberOfOrganization_competencies_tags', verbose_name="Domaine de compétences / d'activités")),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fac.Contact', verbose_name='Contact')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fac.Organization', verbose_name='Organisme')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Liste de tags séparés par des virgules', initial='', protect_all=True, space_delimiter=False, to='fac.GlobalTag', verbose_name="Fonction dans l'organisation (tag)")),
            ],
            options={
                'verbose_name': "Membre d'organisations",
                'verbose_name_plural': "Membres d'organisations",
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=50, verbose_name='Nom de la liste')),
                ('description', models.TextField(blank=True, default='', max_length=500, verbose_name='Description')),
                ('use_organizations_as_contacts', models.BooleanField(default=True, help_text='Si cette case est cochée, les adresses mails des organisations seront incluses dans la liste, dans le cas contraire, seules les adresses des contacts des organisations seront prises en compte', verbose_name='Utiliser les organisations comme destinataires')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('last_modification', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('contacts', models.ManyToManyField(blank=True, to='fac.Contact', verbose_name='Contacts')),
                ('lists', models.ManyToManyField(blank=True, help_text="l'ensemble des contacts des listes sélectionnées sera inclus dans la liste de diffusion", to='fac.List', verbose_name='Listes')),
                ('organizations', models.ManyToManyField(blank=True, help_text="l'ensemble des contacts des organisations sélectionnées sera inclus dans la liste de diffusion", to='fac.Organization', verbose_name='Organisations')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text="l'ensemble des contacts taggués avec ces tags seront inclus dans la liste de diffusion", initial='', protect_all=True, space_delimiter=False, to='fac.GlobalTag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Liste de contacts',
                'verbose_name_plural': 'Listes de contacts',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='FileTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='FileOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('document', models.FileField(upload_to="fac/files/", verbose_name='Document')),
                ('note', models.TextField(blank=True, max_length=15000, null=True, verbose_name='Note')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fac.Organization', verbose_name='Organisation')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Liste de tags séparés par des virgules', initial='', protect_all=True, space_delimiter=False, to='fac.GlobalTag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.AddField(
            model_name='fileimport',
            name='organizations_not_updated',
            field=models.ManyToManyField(blank=True, related_name='fileimport_organisations_not_updated', to='fac.Organization', verbose_name='Organisations non mises à jour'),
        ),
        migrations.CreateModel(
            name='FileContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('document', models.FileField(upload_to="fac/files/", verbose_name='Document')),
                ('note', models.TextField(blank=True, max_length=15000, null=True, verbose_name='Note')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fac.Contact', verbose_name='Organisation')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Liste de tags séparés par des virgules', initial='', protect_all=True, space_delimiter=False, to='fac.GlobalTag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.CreateModel(
            name='ContactsDuplicate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acknowledged', models.BooleanField(default=False, verbose_name='Acquitté')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('contacts', models.ManyToManyField(blank=True, to='fac.Contact', verbose_name='Contacts')),
            ],
            options={
                'verbose_name': 'Doublons de contacts',
                'verbose_name_plural': 'Doublons de contacts',
                'ordering': ['-creation_date'],
            },
        ),
        migrations.AddField(
            model_name='contact',
            name='fileimport',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fac.FileImport', verbose_name="Lié à un fichier d'import"),
        ),
        migrations.AddField(
            model_name='contact',
            name='tags',
            field=tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, help_text='Liste de tags séparés par des virgules', initial='', protect_all=True, space_delimiter=False, to='fac.GlobalTag', verbose_name='Tags'),
        ),
    ]
