# Generated by Django 2.2.3 on 2019-10-03 10:23

import core.models
import datetime
import dialogwatt.models.exchange_attachment
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    replaces = [('dialogwatt', '0001_initial'), ('dialogwatt', '0002_slot'), ('dialogwatt', '0003_slot_is_active'), ('dialogwatt', '0004_auto_20190324_1411'), ('dialogwatt', '0005_reason'), ('dialogwatt', '0006_reason_form'), ('dialogwatt', '0007_slot_reasons'), ('dialogwatt', '0008_notification'), ('dialogwatt', '0009_auto_20190409_1622'), ('dialogwatt', '0010_auto_20190409_1622'), ('dialogwatt', '0011_auto_20190409_1635'), ('dialogwatt', '0012_auto_20190410_1515'), ('dialogwatt', '0013_auto_20190410_1643'), ('dialogwatt', '0014_auto_20190430_1356'), ('dialogwatt', '0015_exchange_exchangeattachment'), ('dialogwatt', '0016_appointment'), ('dialogwatt', '0017_appointment_place'), ('dialogwatt', '0018_appointment_subject'), ('dialogwatt', '0019_auto_20190609_2221'), ('dialogwatt', '0019_auto_20190604_1429'), ('dialogwatt', '0020_merge_20190611_1418'), ('dialogwatt', '0021_place_email'), ('dialogwatt', '0022_auto_20190701_1605'), ('dialogwatt', '0023_calendarpermanenturl')]

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('accounts', '0012_auto_20190308_2318'),
        ('background_task', '0002_auto_20170927_1109'),
        ('territories', '0002_auto_20190308_2322'),
    ]

    operations = [
        migrations.CreateModel(
            name='CatchmentArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('additionnal_information', models.TextField(blank=True, null=True, verbose_name="Information complémentaire pour les CIE lors de l'accueil téléphonique")),
                ('group', models.ForeignKey(blank=True, help_text='Groupe', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='catchment_area', to='accounts.Group', verbose_name='Groupe')),
                ('territories', models.ManyToManyField(to='territories.Commune', verbose_name='Territoires')),
            ],
            options={
                'verbose_name': 'Zone de chalandise',
                'verbose_name_plural': 'Zones de chalandise',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('presentation', models.TextField(blank=True, null=True, verbose_name='Présentation du lieu')),
                ('internal_presentation', models.TextField(blank=True, null=True, verbose_name='Présentation du lieu à destination des conseillers')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=100, null=True, region=None, verbose_name='Numéro de téléphone')),
                ('is_active', models.BooleanField(default=True, help_text='Lieu actif ?', verbose_name='active')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='Adresse')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ville')),
                ('postcode', models.CharField(blank=True, max_length=8, null=True, verbose_name='Code postal')),
                ('lat', models.DecimalField(decimal_places=6, default=0, max_digits=9, verbose_name='Latitude')),
                ('lon', models.DecimalField(decimal_places=6, default=0, max_digits=9, verbose_name='Londitude')),
                ('inseecode', models.CharField(blank=True, max_length=8, null=True, verbose_name='Code INSEE')),
                ('url', models.URLField(verbose_name='Url')),
                ('groups', models.ManyToManyField(to='accounts.Group', verbose_name='Structures attachées à ce lieu')),
                ('color', models.CharField(default='#888888', max_length=10, verbose_name='Color')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Courriel')),
                ('selected_advisors', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Conseillers intervenant sur ce lieu')),
            ],
            options={
                'verbose_name': 'Lieu de conseil',
                'verbose_name_plural': 'Lieux de conseil',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Reason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom du service')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif ?')),
                ('duration', models.IntegerField(default=0, verbose_name='Durée (en minutes)')),
                ('internal_description', models.TextField(blank=True, null=True, verbose_name='Présentation interne service')),
                ('show_description', models.BooleanField(default=True, verbose_name='Montrer la description du service')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Présentation du service')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Group', verbose_name='Structure')),
                ('form', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Motifs de rendez-vous',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('text', models.CharField(max_length=100, verbose_name='Nom')),
                ('visibility', models.CharField(choices=[('online', 'Rendez-vous en ligne'), ('advisor', 'Rendez-vous accessible aux conseillers uniquement'), ('without_reservation', 'Sans rendez-vous')], default='online', max_length=30, verbose_name='Visibilité')),
                ('deadline', models.IntegerField(default=24, verbose_name='Délai (en h)')),
                ('time_between_slots', models.IntegerField(default=0, verbose_name='Temps entre deux rendez-vous (en minutes)')),
                ('use_advisor_calendar', models.BooleanField(default=True, verbose_name='Gestion des agendas conseillers')),
                ('number_of_active_advisors', models.IntegerField(default=0, verbose_name='Nombre de conseillers simultanés')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Présentation interne du créneau')),
                ('advisors', models.ManyToManyField(limit_choices_to={'user_type': 'advisor'}, to=settings.AUTH_USER_MODEL, verbose_name='Liste de conseillers')),
                ('catchment_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dialogwatt.CatchmentArea', verbose_name='Zone de chalandise')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Group', verbose_name='Structure')),
                ('is_active', models.BooleanField(default=True, help_text='Lieu actif ?', verbose_name='active')),
                ('end_date', models.DateTimeField(default=None, verbose_name='Date et heure de fin')),
                ('place', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='dialogwatt.Place', verbose_name='Lieu de conseil')),
                ('start_date', models.DateTimeField(default=None, verbose_name='Date et heure de début')),
                ('reasons', models.ManyToManyField(to='dialogwatt.Reason', verbose_name='Motifs de rendez-vous')),
                ('public_description', models.TextField(blank=True, null=True, verbose_name='Présentation publique du créneau')),
            ],
            options={
                'verbose_name': 'Créneau',
                'ordering': ('start_date',),
            },
        ),
        migrations.CreateModel(
            name='ExchangeAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('filecontent', models.FileField(blank=True, null=True, upload_to=dialogwatt.models.exchange_attachment.exchange_attachment_directory_path, verbose_name='Fichier')),
            ],
            options={
                'verbose_name': 'Pièce jointe',
                'verbose_name_plural': 'Pièces jointes',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('subject', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sujet')),
                ('message', models.TextField(blank=True, null=True, verbose_name='Message')),
                ('message_html', models.TextField(blank=True, null=True, verbose_name='Message')),
                ('message_type', models.CharField(choices=[('sms', 'SMS'), ('mail', 'Courriel'), ('chat', 'Chat')], default='mail', max_length=100, verbose_name='Type de message')),
                ('has_been_sent_on', models.DateTimeField(blank=True, null=True)),
                ('has_been_received_on', models.DateTimeField(blank=True, null=True)),
                ('has_been_opened_on', models.DateTimeField(blank=True, null=True)),
                ('error', models.CharField(blank=True, max_length=200, null=True, verbose_name="Message d'erreur")),
                ('attachments', models.ManyToManyField(to='dialogwatt.ExchangeAttachment', verbose_name='Fichiers joints')),
                ('background_task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='background_task', to='background_task.Task', verbose_name='Background Task')),
                ('from_account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exchange_from', to=settings.AUTH_USER_MODEL, verbose_name='Expediteur')),
                ('to_account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exchange_to', to=settings.AUTH_USER_MODEL, verbose_name='Destinataire')),
            ],
            options={
                'verbose_name': 'Exchange',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('start_date', models.DateTimeField(verbose_name='Date et heure de début')),
                ('end_date', models.DateTimeField(verbose_name='Date et heure de fin')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('has_been_honored', models.BooleanField(default=False, verbose_name='Rendez-vous honoré ?')),
                ('advisor', models.ForeignKey(limit_choices_to={'user_type': 'advisor'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='apointments_as_advisor', to=settings.AUTH_USER_MODEL, verbose_name='Conseiller')),
                ('reason', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dialogwatt.Reason', verbose_name='Motif')),
                ('slot', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dialogwatt.Slot', verbose_name='Créneau')),
                ('place', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dialogwatt.Place', verbose_name='Lieu')),
                ('subject', models.CharField(default='-', max_length=100, verbose_name='Sujet')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.ContentType')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Rendez-vous',
                'ordering': ('start_date',),
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la notification')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif ?')),
                ('trigger', models.CharField(choices=[('created_account', "Création d'un compte par le contact"), ('created_client', "Création d'un rdv par le contact"), ('changed_client', "Modification d'un rdv par le contact"), ('canceled_client', "Annulation d'un rdv par le contact"), ('created_advisor', "Création d'un rdv par le conseiller"), ('changed_advisor', "Modification d'un rdv par le conseiller"), ('canceled_advisor', "Annulation d'un rdv par le conseiller")], max_length=100, verbose_name='Déclencheur')),
                ('term', models.CharField(choices=[('immediate', 'Instantané'), ('delayed', 'Différé')], default='immediate', max_length=10, verbose_name='Délai')),
                ('term_days', models.PositiveIntegerField(default=0, verbose_name='Délai en jours')),
                ('term_day_type', models.CharField(choices=[('calendar', 'Calendaire'), ('open', 'Ouvrés (hors WE)')], default='calendar', max_length=10, verbose_name='Type de jours de délai')),
                ('term_after_before', models.CharField(choices=[('after', 'Après'), ('before', 'Avant')], default='before', max_length=10, verbose_name='Avant ou après')),
                ('term_time', models.TimeField(default=datetime.time(12, 0), verbose_name="Heure d'envoi")),
                ('to', models.CharField(choices=[('contact', 'Contact'), ('all_advisors', 'Tous les conseillers'), ('some_advisors', 'Des conseillers'), ('allocated_advisor', 'Le conseiller concerné par le rdv')], max_length=100, verbose_name='Destinataire')),
                ('sms_is_active', models.BooleanField(default=True, verbose_name='Sms actif ?')),
                ('sms_message', models.TextField(blank=True, null=True, verbose_name='Texte SMS')),
                ('mail_is_active', models.BooleanField(default=True, verbose_name='Mail actif ?')),
                ('mail_message', models.TextField(blank=True, null=True, verbose_name='Texte MAIL')),
                ('chat_is_active', models.BooleanField(default=True, verbose_name='Chat actif ?')),
                ('chat_message', models.TextField(blank=True, null=True, verbose_name='Texte CHAT')),
                ('advisors', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Conseillers')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Group', verbose_name='Structure')),
                ('places', models.ManyToManyField(to='dialogwatt.Place', verbose_name='Lieux de conseil')),
                ('reasons', models.ManyToManyField(to='dialogwatt.Reason', verbose_name='Motifs de rendez-vous')),
                ('all_places', models.BooleanField(default=True, verbose_name='Tous lieux ?')),
                ('all_reasons', models.BooleanField(default=True, verbose_name='Tous motifs ?')),
            ],
            options={
                'verbose_name': 'Notification',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='CalendarPermanentUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('unique_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('advisors', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Conseillers')),
                ('places', models.ManyToManyField(to='dialogwatt.Place', verbose_name="Lieux d'accueil")),
                ('user', models.ForeignKey(limit_choices_to={'user_type': 'advisor'}, on_delete=django.db.models.deletion.CASCADE, related_name='calendar', to=settings.AUTH_USER_MODEL, verbose_name='Conseiller')),
            ],
            options={
                'verbose_name': 'Filtrages permanents de calendrier',
            },
        ),
    ]
