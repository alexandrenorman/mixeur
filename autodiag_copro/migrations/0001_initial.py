# Generated by Django 2.1.5 on 2019-03-07 23:01

import autodiag_copro.models.altitude_ratio
import autodiag_copro.models.climatic_zone_ratio
import autodiag_copro.models.combustible_params
import autodiag_copro.models.copro
import autodiag_copro.models.params
import autodiag_copro.models.yearly_combustible_params
import autodiag_copro.models.yearly_data
import autodiag_copro.models.yearly_params
import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import core.models
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts', '0011_remove_user_address'),
    ]

    operations = [
        migrations.CreateModel(
            name='AltitudeRatio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('altitude', models.CharField(max_length=300, verbose_name='Altitude')),
                ('value', models.DecimalField(decimal_places=2, max_digits=20, validators=[autodiag_copro.models.altitude_ratio.validation_absolute_positive], verbose_name='Indice')),
            ],
            options={
                'verbose_name': "Indice d'altitude",
            },
        ),
        migrations.CreateModel(
            name='ClimaticZoneRatio',
            fields=[
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('code', models.PositiveSmallIntegerField(default=1, primary_key=True, serialize=False, verbose_name='Code départemental')),
                ('name', models.CharField(max_length=300, verbose_name='Nom du département')),
                ('value', models.DecimalField(decimal_places=2, max_digits=20, validators=[autodiag_copro.models.climatic_zone_ratio.validation_absolute_positive], verbose_name='Indice')),
            ],
            options={
                'verbose_name': 'Indice de zone climatique',
            },
        ),
        migrations.CreateModel(
            name='CombustibleParams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('combustible', models.PositiveSmallIntegerField(choices=[(0, 'Fioul'), (1, 'Gaz de ville'), (2, 'Gaz propane'), (3, 'Réseau de chaleur'), (4, 'Électricité'), (5, 'Bois')], verbose_name='Combustible')),
                ('avg_hot_water_energy_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.combustible_params.validation_absolute_positive], verbose_name='Copro moy. - Ratio de consommation énergétique - eau chaude')),
                ('eff_hot_water_energy_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.combustible_params.validation_absolute_positive], verbose_name='Copro perf. - Ratio de consommation énergétique - eau chaude')),
            ],
            options={
                'verbose_name': 'Paramètres des combustibles',
            },
        ),
        migrations.CreateModel(
            name='Copro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(max_length=300, verbose_name='Nom de la copropriété')),
                ('address', models.CharField(blank=True, max_length=300, null=True, verbose_name='Adresse')),
                ('zipcode', models.CharField(max_length=20, verbose_name='Code Postal')),
                ('contact_last_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='Nom')),
                ('contact_first_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='Prénom')),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=100, null=True, verbose_name='Numéro de téléphone')),
                ('syndic_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='Nom du syndic')),
                ('number_of_dwellings', models.PositiveSmallIntegerField(default=1, validators=[autodiag_copro.models.copro.validation_absolute_positive], verbose_name='Nombre de logements')),
                ('number_of_offices_shops', models.PositiveSmallIntegerField(default=0, verbose_name='Nombre de bureaux et commerces')),
                ('living_area', models.PositiveSmallIntegerField(validators=[autodiag_copro.models.copro.validation_absolute_positive], verbose_name='Surface habitable totale')),
                ('number_of_buildings', models.PositiveSmallIntegerField(default=1, validators=[autodiag_copro.models.copro.validation_absolute_positive], verbose_name='Nombre de bâtiments')),
                ('number_of_floors', models.PositiveSmallIntegerField(verbose_name="Nombre d'étages")),
                ('build_year', models.PositiveSmallIntegerField(choices=[(0, 'Avant 1948'), (1, 'Entre 1948 et 1977'), (2, 'Entre 1977 et 2005'), (3, 'Après 2005')], verbose_name='Année de construction')),
                ('heating_is_collective', models.BooleanField(default=False, verbose_name='Chauffage collectif')),
                ('heating_individualisation_mode', models.PositiveSmallIntegerField(choices=[(0, 'Surface'), (1, 'Compteurs de chaleur'), (2, 'Répartiteur de chaleur')], verbose_name="Mode d'individualisation des frais de chauffage")),
                ('heating_individualisation_costs', models.PositiveSmallIntegerField(null=True, verbose_name="Frais d'individualisation")),
                ('heating_has_maintenance_contract_P2', models.BooleanField(default=False, verbose_name='Contrat de maintenance P2')),
                ('heating_maintenance_contract_P2_cost', models.PositiveSmallIntegerField(null=True, verbose_name='Montant du contrat de maintenance P2')),
                ('heating_has_maintenance_contract_P2_P3', models.BooleanField(default=False, verbose_name='Contrat de maintenance P2 + P3')),
                ('heating_maintenance_contract_P2_P3_cost', models.PositiveSmallIntegerField(null=True, verbose_name='Montant du contrat de maintenance P2 + P3')),
                ('heating_combustible', models.PositiveSmallIntegerField(choices=[(0, 'Fioul'), (1, 'Gaz de ville'), (2, 'Gaz propane'), (3, 'Réseau de chaleur'), (4, 'Électricité'), (5, 'Bois')], verbose_name='Combustible')),
                ('hot_water_is_collective', models.BooleanField(default=False, verbose_name='Eau chaude collectif ?')),
                ('hot_water_has_meters', models.BooleanField(default=False, verbose_name="Avec compteur(s) d'eau chaude ?")),
                ('water_is_collective', models.BooleanField(default=False, verbose_name='Eau chaude collectif ?')),
                ('water_has_meters', models.BooleanField(default=False, verbose_name="Avec compteur(s) d'eau ?")),
                ('altitude', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='autodiag_copro.AltitudeRatio', verbose_name='Altitude')),
            ],
            options={
                'verbose_name': 'Informations copropriété',
                'verbose_name_plural': 'Informations copropriétés',
            },
        ),
        migrations.CreateModel(
            name='DefaultCombustibleParams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('combustible', models.PositiveSmallIntegerField(choices=[(0, 'Fioul'), (1, 'Gaz de ville'), (2, 'Gaz propane'), (3, 'Réseau de chaleur'), (4, 'Électricité'), (5, 'Bois')], verbose_name='Combustible')),
                ('avg_hot_water_energy_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.combustible_params.validation_absolute_positive], verbose_name='Copro moy. - Ratio de consommation énergétique - eau chaude')),
                ('eff_hot_water_energy_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.combustible_params.validation_absolute_positive], verbose_name='Copro perf. - Ratio de consommation énergétique - eau chaude')),
            ],
            options={
                'verbose_name': 'Paramètres des combustibles par défaut',
            },
        ),
        migrations.CreateModel(
            name='DefaultParams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('is_default_value', models.BooleanField(default=False, verbose_name='est une valeur par défaut')),
                ('avg_living_area', models.PositiveSmallIntegerField(default=1, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name="Surface moyenne d'un logement")),
                ('avg_hot_water_conso_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name='Copro moy. - Ratio de consommation - eau chaude')),
                ('avg_water_conso_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name='Copro moy. - Ratio de consommation - eau froide')),
                ('eff_hot_water_conso_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name='Copro perf. - Ratio de consommation - eau chaude')),
                ('eff_water_conso_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name='Copro perf. - Ratio de consommation - eau froide')),
                ('key', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.Group', verbose_name='Structure')),
            ],
            options={
                'verbose_name': 'Paramètres par défault',
            },
        ),
        migrations.CreateModel(
            name='DefaultYearlyCombustibleParams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('years', models.CharField(max_length=9, verbose_name='Années')),
                ('avg_energy_cost_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.yearly_combustible_params.validation_absolute_positive], verbose_name='Copro moy. - Ratio de coût énergie')),
                ('eff_energy_cost_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.yearly_combustible_params.validation_absolute_positive], verbose_name='Copro perf. - Ratio de coût énergie')),
                ('combustible_params', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='yearly_combustible_params', to='autodiag_copro.DefaultCombustibleParams', verbose_name='Paramètres de combustible par défaut')),
            ],
            options={
                'verbose_name': 'Paramètres annuels des combustibles par défaut',
            },
        ),
        migrations.CreateModel(
            name='DefaultYearlyParams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('years', models.CharField(max_length=9, verbose_name='Années')),
                ('water_cost', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.yearly_params.validation_absolute_positive], verbose_name='Prix eau froide')),
                ('params', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='yearly_params', to='autodiag_copro.DefaultParams', verbose_name='Paramètres par défaut')),
            ],
            options={
                'verbose_name': 'Paramètres annuels par défault',
            },
        ),
        migrations.CreateModel(
            name='Diagnostic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('comments', ckeditor.fields.RichTextField(verbose_name='Commentaires')),
                ('copro', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='autodiag_copro.Copro', verbose_name='Informations générale')),
            ],
            options={
                'verbose_name': 'Diagnostic de copropriété',
                'verbose_name_plural': 'Diagnostics de copropriétés',
            },
        ),
        migrations.CreateModel(
            name='Params',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('avg_living_area', models.PositiveSmallIntegerField(default=1, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name="Surface moyenne d'un logement")),
                ('avg_hot_water_conso_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name='Copro moy. - Ratio de consommation - eau chaude')),
                ('avg_water_conso_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name='Copro moy. - Ratio de consommation - eau froide')),
                ('eff_hot_water_conso_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name='Copro perf. - Ratio de consommation - eau chaude')),
                ('eff_water_conso_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.params.validation_absolute_positive], verbose_name='Copro perf. - Ratio de consommation - eau froide')),
            ],
            options={
                'verbose_name': 'Paramètres',
            },
        ),
        migrations.CreateModel(
            name='YearlyCombustibleParams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('years', models.CharField(max_length=9, verbose_name='Années')),
                ('avg_energy_cost_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.yearly_combustible_params.validation_absolute_positive], verbose_name='Copro moy. - Ratio de coût énergie')),
                ('eff_energy_cost_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.yearly_combustible_params.validation_absolute_positive], verbose_name='Copro perf. - Ratio de coût énergie')),
                ('combustible_params', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='autodiag_copro.CombustibleParams', verbose_name='Paramètres de combustible')),
            ],
            options={
                'verbose_name': 'Paramètres annuels des combustibles',
            },
        ),
        migrations.CreateModel(
            name='YearlyData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('years', models.CharField(max_length=9, verbose_name='Années')),
                ('heating_energy_charges', models.DecimalField(decimal_places=2, max_digits=20, validators=[autodiag_copro.models.yearly_data.validation_absolute_positive], verbose_name='Énergie - chauffage')),
                ('energy_consumption', models.DecimalField(decimal_places=2, max_digits=20, validators=[autodiag_copro.models.yearly_data.validation_absolute_positive], verbose_name='Énergie brute')),
                ('hot_water_energy_charges', models.DecimalField(decimal_places=2, max_digits=20, validators=[autodiag_copro.models.yearly_data.validation_absolute_positive], verbose_name='Énergie - eau chaude')),
                ('hot_water_consumption_charges', models.DecimalField(decimal_places=2, max_digits=20, validators=[autodiag_copro.models.yearly_data.validation_absolute_positive], verbose_name='Consommation - eau chaude')),
                ('hot_water_consumption', models.DecimalField(decimal_places=2, max_digits=20, validators=[autodiag_copro.models.yearly_data.validation_absolute_positive], verbose_name='Volume total - eau chaude')),
                ('water_consumption_charges', models.DecimalField(decimal_places=2, max_digits=20, validators=[autodiag_copro.models.yearly_data.validation_absolute_positive], verbose_name='Consommation eau froide')),
                ('water_consumption', models.DecimalField(decimal_places=2, max_digits=20, validators=[autodiag_copro.models.yearly_data.validation_absolute_positive], verbose_name='Volume total - eau froide')),
                ('dju_correction', models.PositiveSmallIntegerField(default=1, validators=[autodiag_copro.models.yearly_data.validation_absolute_positive], verbose_name='Correction DJU')),
                ('copro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='autodiag_copro.Copro', verbose_name='Copropriété')),
            ],
            options={
                'verbose_name': 'Données annuelle',
                'ordering': ('-years',),
            },
        ),
        migrations.CreateModel(
            name='YearlyParams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('years', models.CharField(max_length=9, verbose_name='Années')),
                ('water_cost', models.DecimalField(decimal_places=10, max_digits=20, validators=[autodiag_copro.models.yearly_params.validation_absolute_positive], verbose_name='Prix eau froide')),
                ('params', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='yearly_params', to='autodiag_copro.Params', verbose_name='Paramètres')),
            ],
            options={
                'verbose_name': 'Paramètres annuels',
            },
        ),
        migrations.AddField(
            model_name='diagnostic',
            name='params',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='autodiag_copro.Params', verbose_name='Paramètres principaux'),
        ),
        migrations.AddField(
            model_name='diagnostic',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur responsable de la demande'),
        ),
        migrations.AddField(
            model_name='defaultcombustibleparams',
            name='params',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='combustible_params', to='autodiag_copro.DefaultParams', verbose_name='Paramètres par défaut'),
        ),
        migrations.AddField(
            model_name='combustibleparams',
            name='params',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='autodiag_copro.Params', verbose_name='Paramètres'),
        ),
        migrations.AlterUniqueTogether(
            name='yearlyparams',
            unique_together={('params', 'years')},
        ),
        migrations.AlterUniqueTogether(
            name='yearlycombustibleparams',
            unique_together={('combustible_params', 'years')},
        ),
        migrations.AlterUniqueTogether(
            name='defaultyearlyparams',
            unique_together={('params', 'years')},
        ),
        migrations.AlterUniqueTogether(
            name='defaultyearlycombustibleparams',
            unique_together={('combustible_params', 'years')},
        ),
    ]
