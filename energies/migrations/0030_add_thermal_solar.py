# Generated by Django 2.2.3 on 2019-08-23 10:32

from django.db import migrations, models
from decimal import Decimal


def add_solar_energy(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")

    Energy.objects.create(
        identifier="thermal_solar",
        primary_energy_ratio=Decimal("1"),
        ghg_ratio=Decimal("0"),
        carbon_tax=False,
        combustible_category="renewable",
        price_variation=Decimal("0"),
    )


def remove_solar_energy(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    solar = Energy.objects.filter(identifier="thermal_solar")
    solar.delete()


def add_solar_vectors(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    EnergyVector = apps.get_model("energies", "EnergyVector")

    solar_energy = Energy.objects.get(identifier="thermal_solar")

    EnergyVector.objects.create(
        buying_unit="-", pci=Decimal("1"), unit="kWh", energy=solar_energy, order=10
    )


def remove_solar_vectors(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    EnergyVector = apps.get_model("energies", "EnergyVector")

    solar_energy = Energy.objects.get(identifier="thermal_solar")
    for vector in EnergyVector.objects.filter(energy=solar_energy):
        vector.delete()


def add_solar_production_systems(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    ProductionSystem = apps.get_model("energies", "ProductionSystem")

    solar_energy = Energy.objects.get(identifier="thermal_solar")

    ProductionSystem.objects.create(
        identifier="solar_system_combined",
        is_heating=True,
        is_hot_water=True,
        is_individual=True,
        is_multi_unit=True,
        efficiency_heating=Decimal("1"),
        efficiency_hot_water=Decimal("1"),
        energy=solar_energy,
        is_hydro=True,
        enr_ratio_heating=Decimal("1"),
        enr_ratio_hot_water=Decimal("1"),
        
        investment_individual_heating="1000",
        investment_individual_hot_water="1000",
        investment_small_multi_unit_heating="1000",
        investment_medium_multi_unit_heating="1000",
        investment_large_multi_unit_heating="1000",
        investment_small_multi_unit_hot_water="1000",
        investment_medium_multi_unit_hot_water="1000",
        investment_large_multi_unit_hot_water="1000",

        maintenance_individual_heating="50",
        maintenance_individual_hot_water="50",
        maintenance_small_multi_unit_heating="30",
        maintenance_medium_multi_unit_heating="30",
        maintenance_large_multi_unit_heating="30",
        maintenance_small_multi_unit_hot_water="30",
        maintenance_medium_multi_unit_hot_water="30",
        maintenance_large_multi_unit_hot_water="30",

        provisions_small_multi_unit_heating="20",
        provisions_medium_multi_unit_heating="20",
        provisions_large_multi_unit_heating="20",
        provisions_small_multi_unit_hot_water="20",
        provisions_medium_multi_unit_hot_water="20",
        provisions_large_multi_unit_hot_water="20",
    )
    ProductionSystem.objects.create(
        identifier="solar_water_heater",
        is_heating=False,
        is_hot_water=True,
        is_individual=True,
        is_multi_unit=True,
        efficiency_heating=None,
        efficiency_hot_water=Decimal("1"),
        energy=solar_energy,
        is_hydro=False,
        enr_ratio_heating=None,
        enr_ratio_hot_water=Decimal("1"),

        investment_individual_heating=None,
        investment_individual_hot_water="1300",
        investment_small_multi_unit_heating=None,
        investment_medium_multi_unit_heating=None,
        investment_large_multi_unit_heating=None,
        investment_small_multi_unit_hot_water="1300",
        investment_medium_multi_unit_hot_water="1300",
        investment_large_multi_unit_hot_water="1300",

        maintenance_individual_heating=None,
        maintenance_individual_hot_water="50",
        maintenance_small_multi_unit_heating=None,
        maintenance_medium_multi_unit_heating=None,
        maintenance_large_multi_unit_heating=None,
        maintenance_small_multi_unit_hot_water="30",
        maintenance_medium_multi_unit_hot_water="30",
        maintenance_large_multi_unit_hot_water="30",

        provisions_small_multi_unit_heating=None,
        provisions_medium_multi_unit_heating=None,
        provisions_large_multi_unit_heating=None,
        provisions_small_multi_unit_hot_water="20",
        provisions_medium_multi_unit_hot_water="20",
        provisions_large_multi_unit_hot_water="20",
    )


def remove_solar_production_systems(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    ProductionSystem = apps.get_model("energies", "ProductionSystem")

    solar_energy = Energy.objects.get(identifier="thermal_solar")
    for production_system in ProductionSystem.objects.filter(energy=solar_energy):
        production_system.delete()


class Migration(migrations.Migration):

    dependencies = [("energies", "0029_update_energy_price_variation_fixed")]

    operations = [
        migrations.AlterField(
            model_name="energy",
            name="identifier",
            field=models.CharField(
                choices=[
                    ("oil", "Fioul"),
                    ("gaz_b0", "Gaz B0"),
                    ("gaz_b1", "Gaz B1"),
                    ("propane", "Propane"),
                    ("electricity", "Électricité"),
                    ("wood", "Bois"),
                    ("shredded_wood", "Bois déchiqueté"),
                    ("bulk_granules", "Bois granulés en vrac"),
                    ("bag_granules", "Bois granulés en sac"),
                    ("network", "Réseau"),
                    ("thermal_solar", "Solaire thermique"),
                ],
                max_length=30,
                unique=True,
                verbose_name="Identifiant d'énergie",
            ),
        ),
        migrations.AlterField(
            model_name="productionsystem",
            name="identifier",
            field=models.CharField(
                choices=[
                    ("oil_boiler_standard", "Chaudière fioul standard"),
                    ("oil_boiler_condensing", "Chaudière fioul condensation"),
                    ("gaz_boiler_standard", "Chaudière gaz standard"),
                    ("gaz_boiler_condensing", "Chaudière gaz condensation"),
                    ("propane_boiler_standard", "Chaudière propane standard"),
                    ("propane_boiler_condensing", "Chaudière propane condensation"),
                    ("electric_boiler", "Chaudière électrique"),
                    ("electric_radiators", "Radiateurs électriques"),
                    ("heat_pump_air_air", "PAC air/air"),
                    ("heat_pump_air_water", "PAC air/eau "),
                    (
                        "heat_pump_geothermal_lte",
                        "PAC géothermale avec émetteurs basse température",
                    ),
                    (
                        "heat_pump_geothermal_vlte",
                        "PAC géothermale avec émetteurs très basse température",
                    ),
                    ("thermodynamic_cmv", "VMC thermodynamique"),
                    ("log_stove", "Poêle à bûches récent"),
                    ("granulated_wood_stove", "Poêle à bois granulés"),
                    ("granulated_wood_boiler", "Chaudière à bois granulés"),
                    ("log_boiler", "Chaudière à bûches"),
                    ("shredded_wood_boiler", "Chaudière à bois déchiqueté"),
                    ("recent_log_boiler_stove", "Poêle à bûches récent bouilleur"),
                    ("granulated_wood_boiler_stove", "Poêle à bois granulés bouilleur"),
                    ("electric_water_heater", "Chauffe-eau électrique"),
                    ("ceti_outside_air", "CETI sur air extérieur"),
                    ("ceti_inside_air", "CETI sur air intérieur"),
                    ("ceti_extracted_air", "CETI sur air extrait"),
                    (
                        "heat_pump_using_waste_heat",
                        "PAC valorisant une chaleur perdue (eaux grises etc.)",
                    ),
                    ("heating_network", "RCU (Réseau de Chaleur Urbain)"),
                    ("solar_system_combined", "Système Solaire Combiné"),
                    ("solar_water_heater", "Chauffe-eau Solaire"),
                ],
                max_length=50,
                unique=True,
                verbose_name="Identifiant",
            ),
        ),
        migrations.RunPython(add_solar_energy, reverse_code=remove_solar_energy),
        migrations.RunPython(add_solar_vectors, reverse_code=remove_solar_vectors),
        migrations.RunPython(
            add_solar_production_systems, reverse_code=remove_solar_production_systems
        ),
    ]
