# Generated by Django 2.2.3 on 2019-09-17 14:20

import core.models
from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import json
from django.db import migrations


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:

# energies.migrations.0001_initial
def validation_absolute_positive():
    pass

# energies.migrations.0002_auto_20190317_1824
def load_fixture_0002(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    with open('./energies/fixtures/energy_data.json') as json_file:
        data = json.load(json_file)
        energy_records = []
        for entry in data:
            fields = entry['fields']
            energy_records.append(Energy(
                identifier=fields['identifier'],
                primary_energy_ratio=fields['primary_energy_ratio'],
                ghg_ratio=fields['ghg_ratio'],
                carbon_tax=fields['carbon_tax'],
                pci_ratio=fields['pci_ratio'],
                density_ratio=fields['density_ratio'],
            ))
    Energy.objects.bulk_create(energy_records)

    YearlyEnergyPrice = apps.get_model("energies", "YearlyEnergyPrice")
    with open('./energies/fixtures/yearly_energy_price_data.json') as json_file:
        data = json.load(json_file)
        yearly_energy_price_records = []
        for entry in data:
            fields = entry['fields']
            yearly_energy_price_records.append(YearlyEnergyPrice(
                year=fields['year'],
                energy=Energy.objects.get(pk=fields['energy']),
                price=fields['price'],
            ))
    YearlyEnergyPrice.objects.bulk_create(yearly_energy_price_records)


def unload_fixture_0002(apps, schema_editor):
    energy_model = apps.get_model("energies", "Energy")
    energy_model.objects.all().delete()
    yearly_energy_price_model = apps.get_model("energies", "YearlyEnergyPrice")
    yearly_energy_price_model.objects.all().delete()

# energies.migrations.0005_energy_add_network
def add_energy_type_0005(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    if not Energy.objects.filter(identifier='network').exists():
        Energy.objects.create(
            identifier="network",
            primary_energy_ratio=1,
            ghg_ratio=0.05,
            carbon_tax=False,
            pci_ratio=None,
            density_ratio=None,
        )


def reverse_add_energy_type_0005(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    Energy.objects.filter(identifier="network").delete()

# energies.migrations.0007_energyvector_data
def load_data_0007(apps, schema_editor):
    EnergyVector = apps.get_model("energies", "EnergyVector")
    Energy = apps.get_model("energies", "Energy")

    energies = {energy.identifier: energy for energy in Energy.objects.all()}

    EnergyVector.objects.bulk_create([
        EnergyVector(vector='oil_kg', buying_unit='kg de fioul', pci=Decimal("11.8"), unit="kWh / kg", energy=energies['oil'], order=10),
        EnergyVector(vector='oil_l', buying_unit='L de fioul', pci=Decimal("10.384"), unit="kWh / L", energy=energies['oil'], order=20),
        EnergyVector(vector='oil_kwh', buying_unit='kWh', pci=Decimal("1"), unit="kWh", energy=energies['oil'], order=30),
        EnergyVector(vector='propane_kg', buying_unit='kg de propane', pci=Decimal("12.88"), unit="kWh / kg", energy=energies['gaz_b1'], order=40),
        EnergyVector(vector='propane_m3', buying_unit='m3 de propane', pci=Decimal("7728"), unit="kWh / m³", energy=energies['gaz_b1'], order=50),
        EnergyVector(vector='propane_bottles', buying_unit='Bouteilles de 13 kg de propane', pci=Decimal("167"), unit="kWh / bouteilles de 13 kg", energy=energies['propane'], order=60),
        EnergyVector(vector='propane_kwh', buying_unit='kWh', pci=Decimal("1"), unit="kWh", energy=energies['propane'], order=70),
        EnergyVector(vector='natural_gaz_m3', buying_unit='m3 de gaz naturel', pci=Decimal("10"), unit="kWh / m³", energy=energies['gaz_b1'], order=80),
        EnergyVector(vector='natural_gaz_kwh', buying_unit='kWh', pci=Decimal("1"), unit="kWh", energy=energies['gaz_b1'], order=90),
        EnergyVector(vector='electricity_kwh', buying_unit='kWh', pci=Decimal("1"), unit="kWh", energy=energies['electricity'], order=100),
        EnergyVector(vector='rcu_kwh', buying_unit='kWh', pci=Decimal("1"), unit="kWh", energy=energies['network'], order=110),
        EnergyVector(vector='wood_logs_stere', buying_unit='stères de bois', pci=Decimal("1700"), unit="kWh / stère", energy=energies['wood'], order=120),
        EnergyVector(vector='granules_t', buying_unit='tonne', pci=Decimal("4700"), unit="kWh / t", energy=energies['bulk_granules'], order=130),
        EnergyVector(vector='granules_bag', buying_unit='nombres de sacs de granulés', pci=Decimal("70.5"), unit="kWh/sac de granulés", energy=energies['bag_granules'], order=140),
        EnergyVector(vector='shredded_wood_t', buying_unit='tonne', pci=Decimal("3500"), unit="kWh / t", energy=energies['shredded_wood'], order=150),
        EnergyVector(vector='shredded_wood_map', buying_unit='MAP', pci=Decimal("875"), unit="kWh / MAP", energy=energies['shredded_wood'], order=160),
        EnergyVector(vector='shredded_wood_kwh', buying_unit='kWh', pci=Decimal("1"), unit="kWh", energy=energies['shredded_wood'], order=170),
    ])

# energies.migrations.0009_buildingheatingconsumption_data
def load_data_0009(apps, schema_editor):
    BuildingHeatingConsumption = apps.get_model("energies", "BuildingHeatingConsumption")
    BuildingHeatingConsumption.objects.bulk_create([
        BuildingHeatingConsumption(criterion="before_1948", heating_consumption=220, comment="", order=10),
        BuildingHeatingConsumption(criterion="between_1948_1974", heating_consumption=300, comment="", order=20),
        BuildingHeatingConsumption(criterion="between_1975_1982", heating_consumption=220, comment="RT 74", order=30),
        BuildingHeatingConsumption(criterion="between_1983_1988", heating_consumption=160, comment="RT 82", order=40),
        BuildingHeatingConsumption(criterion="between_1989_2000", heating_consumption=120, comment="RT 88", order=50),
        BuildingHeatingConsumption(criterion="between_2001_2005", heating_consumption=100, comment="RT 2000", order=60),
        BuildingHeatingConsumption(criterion="between_2006_2012", heating_consumption=85, comment="RT 2005", order=70),
        BuildingHeatingConsumption(criterion="after_2012", heating_consumption=32, comment="RT 2012", order=80),
        BuildingHeatingConsumption(criterion="bbc", heating_consumption=60, comment="Label BBC", order=90),
        BuildingHeatingConsumption(criterion="passive", heating_consumption=15, comment="Label Passiv Haus", order=100),
    ])
# energies.migrations.0011_productionsystem_data
def load_data_0011(apps, schema_editor):
    ProductionSystem = apps.get_model("energies", "ProductionSystem")
    Energy = apps.get_model("energies", "Energy")

    energies = {vector.identifier: vector for vector in Energy.objects.all()}

    ProductionSystem.objects.bulk_create([
        ProductionSystem(identifier="oil_boiler_standard", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("0.82"), efficiency_hot_water=Decimal("0.58"), energy=energies["oil"], is_hydro=True, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="5000", investment_individual_hot_water="5000", investment_small_multi_unit_heating="20000", investment_medium_multi_unit_heating="35000", investment_large_multi_unit_heating="45000", investment_small_multi_unit_hot_water="26000", investment_medium_multi_unit_hot_water="45500", investment_large_multi_unit_hot_water="60000", maintenance_individual_heating="150", maintenance_individual_hot_water="150", maintenance_small_multi_unit_heating="1500", maintenance_medium_multi_unit_heating="3000", maintenance_large_multi_unit_heating="6000", maintenance_small_multi_unit_hot_water="3200", maintenance_medium_multi_unit_hot_water="6000", maintenance_large_multi_unit_hot_water="7800", provisions_small_multi_unit_heating="600", provisions_medium_multi_unit_heating="1050", provisions_large_multi_unit_heating="1350", provisions_small_multi_unit_hot_water="780", provisions_medium_multi_unit_hot_water="1365", provisions_large_multi_unit_hot_water="1800"),
        ProductionSystem(identifier="oil_boiler_condensing", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("0.93"), efficiency_hot_water=Decimal("0.6"), energy=energies["oil"], is_hydro=True, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="6000", investment_individual_hot_water="6000", investment_small_multi_unit_heating="22000", investment_medium_multi_unit_heating="38000", investment_large_multi_unit_heating="50000", investment_small_multi_unit_hot_water="28000", investment_medium_multi_unit_hot_water="50000", investment_large_multi_unit_hot_water="65000", maintenance_individual_heating="150", maintenance_individual_hot_water="150", maintenance_small_multi_unit_heating="1500", maintenance_medium_multi_unit_heating="3000", maintenance_large_multi_unit_heating="6000", maintenance_small_multi_unit_hot_water="3200", maintenance_medium_multi_unit_hot_water="6000", maintenance_large_multi_unit_hot_water="7800", provisions_small_multi_unit_heating="660", provisions_medium_multi_unit_heating="1140", provisions_large_multi_unit_heating="1500", provisions_small_multi_unit_hot_water="840", provisions_medium_multi_unit_hot_water="1500", provisions_large_multi_unit_hot_water="1950"),
        ProductionSystem(identifier="gaz_boiler_standard", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("0.82"), efficiency_hot_water=Decimal("0.62"), energy=energies["gaz_b1"], is_hydro=True, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="4000", investment_individual_hot_water="4000", investment_small_multi_unit_heating="15000", investment_medium_multi_unit_heating="30000", investment_large_multi_unit_heating="40000", investment_small_multi_unit_hot_water="20000", investment_medium_multi_unit_hot_water="40000", investment_large_multi_unit_hot_water="52000", maintenance_individual_heating="150", maintenance_individual_hot_water="150", maintenance_small_multi_unit_heating="1000", maintenance_medium_multi_unit_heating="2000", maintenance_large_multi_unit_heating="5000", maintenance_small_multi_unit_hot_water="1000", maintenance_medium_multi_unit_hot_water="2000", maintenance_large_multi_unit_hot_water="5000", provisions_small_multi_unit_heating="450", provisions_medium_multi_unit_heating="900", provisions_large_multi_unit_heating="1200", provisions_small_multi_unit_hot_water="600", provisions_medium_multi_unit_hot_water="1200", provisions_large_multi_unit_hot_water="1560"),
        ProductionSystem(identifier="gaz_boiler_condensing", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("0.95"), efficiency_hot_water=Decimal("0.72"), energy=energies["gaz_b1"], is_hydro=True, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="5000", investment_individual_hot_water="5000", investment_small_multi_unit_heating="17000", investment_medium_multi_unit_heating="33000", investment_large_multi_unit_heating="45000", investment_small_multi_unit_hot_water="22000", investment_medium_multi_unit_hot_water="43000", investment_large_multi_unit_hot_water="60000", maintenance_individual_heating="150", maintenance_individual_hot_water="150", maintenance_small_multi_unit_heating="1000", maintenance_medium_multi_unit_heating="2000", maintenance_large_multi_unit_heating="5000", maintenance_small_multi_unit_hot_water="1000", maintenance_medium_multi_unit_hot_water="2000", maintenance_large_multi_unit_hot_water="5000", provisions_small_multi_unit_heating="510", provisions_medium_multi_unit_heating="990", provisions_large_multi_unit_heating="1350", provisions_small_multi_unit_hot_water="660", provisions_medium_multi_unit_hot_water="1290", provisions_large_multi_unit_hot_water="1800"),
        ProductionSystem(identifier="propane_boiler_standard", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("0.82"), efficiency_hot_water=Decimal("0.62"), energy=energies["propane"], is_hydro=True, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="5000", investment_individual_hot_water="5000", investment_small_multi_unit_heating="20000", investment_medium_multi_unit_heating="35000", investment_large_multi_unit_heating="45000", investment_small_multi_unit_hot_water="26000", investment_medium_multi_unit_hot_water="45000", investment_large_multi_unit_hot_water="60000", maintenance_individual_heating="150", maintenance_individual_hot_water="150", maintenance_small_multi_unit_heating="1500", maintenance_medium_multi_unit_heating="3000", maintenance_large_multi_unit_heating="6000", maintenance_small_multi_unit_hot_water="3200", maintenance_medium_multi_unit_hot_water="6000", maintenance_large_multi_unit_hot_water="7800", provisions_small_multi_unit_heating="600", provisions_medium_multi_unit_heating="1050", provisions_large_multi_unit_heating="1350", provisions_small_multi_unit_hot_water="780", provisions_medium_multi_unit_hot_water="1350", provisions_large_multi_unit_hot_water="1800"),
        ProductionSystem(identifier="propane_boiler_condensing", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("0.95"), efficiency_hot_water=Decimal("0.72"), energy=energies["propane"], is_hydro=True, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="6000", investment_individual_hot_water="6000", investment_small_multi_unit_heating="22000", investment_medium_multi_unit_heating="38000", investment_large_multi_unit_heating="50000", investment_small_multi_unit_hot_water="28000", investment_medium_multi_unit_hot_water="50000", investment_large_multi_unit_hot_water="65000", maintenance_individual_heating="150", maintenance_individual_hot_water="150", maintenance_small_multi_unit_heating="1500", maintenance_medium_multi_unit_heating="3000", maintenance_large_multi_unit_heating="6000", maintenance_small_multi_unit_hot_water="3200", maintenance_medium_multi_unit_hot_water="6000", maintenance_large_multi_unit_hot_water="7800", provisions_small_multi_unit_heating="660", provisions_medium_multi_unit_heating="1140", provisions_large_multi_unit_heating="1500", provisions_small_multi_unit_hot_water="840", provisions_medium_multi_unit_hot_water="1500", provisions_large_multi_unit_hot_water="1950"),
        ProductionSystem(identifier="electric_boiler", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("1"), efficiency_hot_water=Decimal("0.95"), energy=energies["electricity"], is_hydro=True, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="3000", investment_individual_hot_water="3500", investment_small_multi_unit_heating="10000", investment_medium_multi_unit_heating="20000", investment_large_multi_unit_heating="30000", investment_small_multi_unit_hot_water="13000", investment_medium_multi_unit_hot_water="26000", investment_large_multi_unit_hot_water="40000", maintenance_individual_heating="150", maintenance_individual_hot_water="150", maintenance_small_multi_unit_heating="1000", maintenance_medium_multi_unit_heating="2000", maintenance_large_multi_unit_heating="5000", maintenance_small_multi_unit_hot_water="1000", maintenance_medium_multi_unit_hot_water="2000", maintenance_large_multi_unit_hot_water="5000", provisions_small_multi_unit_heating="300", provisions_medium_multi_unit_heating="600", provisions_large_multi_unit_heating="900", provisions_small_multi_unit_hot_water="390", provisions_medium_multi_unit_hot_water="780", provisions_large_multi_unit_hot_water="1200"),
        ProductionSystem(identifier="electric_radiators", is_heating=True, is_hot_water=False, is_individual=True, is_multi_unit=False, efficiency_heating=Decimal("1"), efficiency_hot_water=None, energy=energies["electricity"], is_hydro=False, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=None, investment_individual_heating="3000", investment_individual_hot_water=None, investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating="0", maintenance_individual_hot_water=None, maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="heat_pump_air_air", is_heating=True, is_hot_water=False, is_individual=True, is_multi_unit=False, efficiency_heating=Decimal("1.87"), efficiency_hot_water=None, energy=energies["electricity"], is_hydro=False, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=None, investment_individual_heating="6000", investment_individual_hot_water=None, investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating="200", maintenance_individual_hot_water=None, maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="heat_pump_air_water", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=False, efficiency_heating=Decimal("2.2"), efficiency_hot_water=Decimal("1.32"), energy=energies["electricity"], is_hydro=True, enr_ratio_heating=Decimal("0"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="12000", investment_individual_hot_water="12000", investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating="200", maintenance_individual_hot_water="200", maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="heat_pump_geothermal_lte", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("3.4"), efficiency_hot_water=Decimal("2.04"), energy=energies["electricity"], is_hydro=True, enr_ratio_heating=Decimal("0.241176470588235"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="20000", investment_individual_hot_water="20000", investment_small_multi_unit_heating="80000", investment_medium_multi_unit_heating="150000", investment_large_multi_unit_heating="250000", investment_small_multi_unit_hot_water="100000", investment_medium_multi_unit_hot_water="200000", investment_large_multi_unit_hot_water="300000", maintenance_individual_heating="200", maintenance_individual_hot_water="200", maintenance_small_multi_unit_heating="1500", maintenance_medium_multi_unit_heating="3000", maintenance_large_multi_unit_heating="6000", maintenance_small_multi_unit_hot_water="2000", maintenance_medium_multi_unit_hot_water="4000", maintenance_large_multi_unit_hot_water="8000", provisions_small_multi_unit_heating="2400", provisions_medium_multi_unit_heating="4500", provisions_large_multi_unit_heating="7500", provisions_small_multi_unit_hot_water="3000", provisions_medium_multi_unit_hot_water="6000", provisions_large_multi_unit_hot_water="9000"),
        ProductionSystem(identifier="heat_pump_geothermal_vlte", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("3.8"), efficiency_hot_water=Decimal("2.28"), energy=energies["electricity"], is_hydro=True, enr_ratio_heating=Decimal("0.321052631578947"), enr_ratio_hot_water=Decimal("0"), investment_individual_heating="20000", investment_individual_hot_water="20000", investment_small_multi_unit_heating="80000", investment_medium_multi_unit_heating="150000", investment_large_multi_unit_heating="250000", investment_small_multi_unit_hot_water="100000", investment_medium_multi_unit_hot_water="200000", investment_large_multi_unit_hot_water="300000", maintenance_individual_heating="200", maintenance_individual_hot_water="200", maintenance_small_multi_unit_heating="1500", maintenance_medium_multi_unit_heating="3000", maintenance_large_multi_unit_heating="6000", maintenance_small_multi_unit_hot_water="2000", maintenance_medium_multi_unit_hot_water="4000", maintenance_large_multi_unit_hot_water="8000", provisions_small_multi_unit_heating="2400", provisions_medium_multi_unit_heating="4500", provisions_large_multi_unit_heating="7500", provisions_small_multi_unit_hot_water="3000", provisions_medium_multi_unit_hot_water="6000", provisions_large_multi_unit_hot_water="9000"),
        ProductionSystem(identifier="thermodynamic_cmv", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=False, efficiency_heating=Decimal("5.2"), efficiency_hot_water=Decimal("3.12"), energy=energies["electricity"], is_hydro=True, enr_ratio_heating=Decimal("0.503846153846154"), enr_ratio_hot_water=Decimal("0.173076923076923"), investment_individual_heating="15000", investment_individual_hot_water="15000", investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating="200", maintenance_individual_hot_water="200", maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="log_stove", is_heating=True, is_hot_water=False, is_individual=True, is_multi_unit=False, efficiency_heating=Decimal("0.7"), efficiency_hot_water=None, energy=energies["wood"], is_hydro=False, enr_ratio_heating=Decimal("1"), enr_ratio_hot_water=None, investment_individual_heating="3000", investment_individual_hot_water=None, investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating="80", maintenance_individual_hot_water=None, maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="granulated_wood_stove", is_heating=True, is_hot_water=False, is_individual=True, is_multi_unit=False, efficiency_heating=Decimal("0.8"), efficiency_hot_water=None, energy=energies["bag_granules"], is_hydro=False, enr_ratio_heating=Decimal("1"), enr_ratio_hot_water=None, investment_individual_heating="5000", investment_individual_hot_water=None, investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating="100", maintenance_individual_hot_water=None, maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="granulated_wood_boiler", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("0.85"), efficiency_hot_water=Decimal("0.72"), energy=energies["bulk_granules"], is_hydro=True, enr_ratio_heating=Decimal("1"), enr_ratio_hot_water=Decimal("1"), investment_individual_heating="16000", investment_individual_hot_water="16000", investment_small_multi_unit_heating="60000", investment_medium_multi_unit_heating="110000", investment_large_multi_unit_heating="180000", investment_small_multi_unit_hot_water="80000", investment_medium_multi_unit_hot_water="140000", investment_large_multi_unit_hot_water="230000", maintenance_individual_heating="250", maintenance_individual_hot_water="250", maintenance_small_multi_unit_heating="3000", maintenance_medium_multi_unit_heating="6000", maintenance_large_multi_unit_heating="12000", maintenance_small_multi_unit_hot_water="4000", maintenance_medium_multi_unit_hot_water="7000", maintenance_large_multi_unit_hot_water="15000", provisions_small_multi_unit_heating="1800", provisions_medium_multi_unit_heating="3300", provisions_large_multi_unit_heating="5400", provisions_small_multi_unit_hot_water="2400", provisions_medium_multi_unit_hot_water="4200", provisions_large_multi_unit_hot_water="6900"),
        ProductionSystem(identifier="log_boiler", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=False, efficiency_heating=Decimal("0.72"), efficiency_hot_water=Decimal("0.65"), energy=energies["wood"], is_hydro=True, enr_ratio_heating=Decimal("1"), enr_ratio_hot_water=Decimal("1"), investment_individual_heating="12000", investment_individual_hot_water="12000", investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating="200", maintenance_individual_hot_water="200", maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="shredded_wood_boiler", is_heating=True, is_hot_water=True, is_individual=True, is_multi_unit=True, efficiency_heating=Decimal("0.8"), efficiency_hot_water=Decimal("0.68"), energy=energies["shredded_wood"], is_hydro=True, enr_ratio_heating=Decimal("1"), enr_ratio_hot_water=Decimal("1"), investment_individual_heating="25000", investment_individual_hot_water="25000", investment_small_multi_unit_heating="150000", investment_medium_multi_unit_heating="300000", investment_large_multi_unit_heating="450000", investment_small_multi_unit_hot_water="200000", investment_medium_multi_unit_hot_water="400000", investment_large_multi_unit_hot_water="550000", maintenance_individual_heating="400", maintenance_individual_hot_water="400", maintenance_small_multi_unit_heating="3000", maintenance_medium_multi_unit_heating="4500", maintenance_large_multi_unit_heating="15000", maintenance_small_multi_unit_hot_water="3000", maintenance_medium_multi_unit_hot_water="4500", maintenance_large_multi_unit_hot_water="15000", provisions_small_multi_unit_heating="4500", provisions_medium_multi_unit_heating="9000", provisions_large_multi_unit_heating="13500", provisions_small_multi_unit_hot_water="6000", provisions_medium_multi_unit_hot_water="12000", provisions_large_multi_unit_hot_water="16500"),
        ProductionSystem(identifier="recent_log_boiler_stove", is_heating=False, is_hot_water=True, is_individual=True, is_multi_unit=False, efficiency_heating=None, efficiency_hot_water=Decimal("0.58"), energy=energies["wood"], is_hydro=False, enr_ratio_heating=None, enr_ratio_hot_water=Decimal("0"), investment_individual_heating=None, investment_individual_hot_water="3000", investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating=None, maintenance_individual_hot_water="80", maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="granulated_wood_boiler_stove", is_heating=False, is_hot_water=True, is_individual=True, is_multi_unit=False, efficiency_heating=None, efficiency_hot_water=Decimal("0.68"), energy=energies["bag_granules"], is_hydro=False, enr_ratio_heating=None, enr_ratio_hot_water=Decimal("0"), investment_individual_heating=None, investment_individual_hot_water="5000", investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating=None, maintenance_individual_hot_water="100", maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="electric_water_heater", is_heating=False, is_hot_water=True, is_individual=True, is_multi_unit=False, efficiency_heating=None, efficiency_hot_water=Decimal("1"), energy=energies["electricity"], is_hydro=False, enr_ratio_heating=None, enr_ratio_hot_water=Decimal("0"), investment_individual_heating=None, investment_individual_hot_water="500", investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating=None, maintenance_individual_hot_water="0", maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="ceti_outside_air", is_heating=False, is_hot_water=True, is_individual=True, is_multi_unit=False, efficiency_heating=None, efficiency_hot_water=Decimal("1.7"), energy=energies["electricity"], is_hydro=False, enr_ratio_heating=None, enr_ratio_hot_water=Decimal("0"), investment_individual_heating=None, investment_individual_hot_water="3000", investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating=None, maintenance_individual_hot_water="100", maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="ceti_inside_air", is_heating=False, is_hot_water=True, is_individual=True, is_multi_unit=False, efficiency_heating=None, efficiency_hot_water=Decimal("1.9"), energy=energies["electricity"], is_hydro=False, enr_ratio_heating=None, enr_ratio_hot_water=Decimal("0"), investment_individual_heating=None, investment_individual_hot_water="3000", investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating=None, maintenance_individual_hot_water="100", maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="ceti_extracted_air", is_heating=False, is_hot_water=True, is_individual=True, is_multi_unit=False, efficiency_heating=None, efficiency_hot_water=Decimal("2.3"), energy=energies["electricity"], is_hydro=False, enr_ratio_heating=None, enr_ratio_hot_water=Decimal("0"), investment_individual_heating=None, investment_individual_hot_water="4500", investment_small_multi_unit_heating=None, investment_medium_multi_unit_heating=None, investment_large_multi_unit_heating=None, investment_small_multi_unit_hot_water=None, investment_medium_multi_unit_hot_water=None, investment_large_multi_unit_hot_water=None, maintenance_individual_heating=None, maintenance_individual_hot_water="100", maintenance_small_multi_unit_heating=None, maintenance_medium_multi_unit_heating=None, maintenance_large_multi_unit_heating=None, maintenance_small_multi_unit_hot_water=None, maintenance_medium_multi_unit_hot_water=None, maintenance_large_multi_unit_hot_water=None, provisions_small_multi_unit_heating=None, provisions_medium_multi_unit_heating=None, provisions_large_multi_unit_heating=None, provisions_small_multi_unit_hot_water=None, provisions_medium_multi_unit_hot_water=None, provisions_large_multi_unit_hot_water=None),
        ProductionSystem(identifier="heat_pump_using_waste_heat", is_heating=True, is_hot_water=True, is_individual=False, is_multi_unit=True, efficiency_heating=Decimal("5.2"), efficiency_hot_water=Decimal("3.1"), energy=energies["electricity"], is_hydro=True, enr_ratio_heating=Decimal("0.503846153846154"), enr_ratio_hot_water=Decimal("0.167741935483871"), investment_individual_heating=None, investment_individual_hot_water=None, investment_small_multi_unit_heating="100000", investment_medium_multi_unit_heating="180000", investment_large_multi_unit_heating="300000", investment_small_multi_unit_hot_water="130000", investment_medium_multi_unit_hot_water="250000", investment_large_multi_unit_hot_water="400000", maintenance_individual_heating=None, maintenance_individual_hot_water=None, maintenance_small_multi_unit_heating="2000", maintenance_medium_multi_unit_heating="4000", maintenance_large_multi_unit_heating="8000", maintenance_small_multi_unit_hot_water="2500", maintenance_medium_multi_unit_hot_water="5000", maintenance_large_multi_unit_hot_water="10000", provisions_small_multi_unit_heating="3000", provisions_medium_multi_unit_heating="5400", provisions_large_multi_unit_heating="9000", provisions_small_multi_unit_hot_water="3900", provisions_medium_multi_unit_hot_water="7500", provisions_large_multi_unit_hot_water="12000"),
        ProductionSystem(identifier="heating_network", is_heating=True, is_hot_water=True, is_individual=False, is_multi_unit=True, efficiency_heating=Decimal("1"), efficiency_hot_water=Decimal("1"), energy=energies["network"], is_hydro=True, enr_ratio_heating=Decimal("0.6"), enr_ratio_hot_water=Decimal("0.6"), investment_individual_heating=None, investment_individual_hot_water=None, investment_small_multi_unit_heating="2000", investment_medium_multi_unit_heating="4000", investment_large_multi_unit_heating="6000", investment_small_multi_unit_hot_water="2000", investment_medium_multi_unit_hot_water="4000", investment_large_multi_unit_hot_water="6000", maintenance_individual_heating=None, maintenance_individual_hot_water=None, maintenance_small_multi_unit_heating="4300", maintenance_medium_multi_unit_heating="8600", maintenance_large_multi_unit_heating="12900", maintenance_small_multi_unit_hot_water="1000", maintenance_medium_multi_unit_hot_water="1500", maintenance_large_multi_unit_hot_water="2000", provisions_small_multi_unit_heating="4300", provisions_medium_multi_unit_heating="8600", provisions_large_multi_unit_heating="12900", provisions_small_multi_unit_hot_water="1000", provisions_medium_multi_unit_hot_water="1500", provisions_large_multi_unit_hot_water="2000"),
    ])
# energies.migrations.0013_energy_add_combustible_category
def load_data_0013(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    energies = Energy.objects.all()

    for energy in energies:
        if energy.pk == 5:
            energy.combustible_category = "electricity"
            energy.save()
        elif energy.pk in [6, 7, 8, 9, 10]:
            energy.combustible_category = "renewable"
            energy.save()

# energies.migrations.0015_carbontax_data
def load_data_0015(apps, schema_editor):
    CarbonTax = apps.get_model("energies", "CarbonTax")

    CarbonTax.objects.bulk_create([
        CarbonTax(year=2018, amount=Decimal('44.6')),
        CarbonTax(year=2019, amount=Decimal('50')),
        CarbonTax(year=2020, amount=Decimal('65.4')),
        CarbonTax(year=2021, amount=Decimal('75.8')),
        CarbonTax(year=2022, amount=Decimal('86.2')),
    ])

# energies.migrations.0016_energy_update_ghg_ratio
def update_data_0016(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")

    data = [
        {'pk': 1, 'ghg_ratio': 0.300},
        {'pk': 2, 'ghg_ratio': 0.234},
        {'pk': 3, 'ghg_ratio': 0.234},
        {'pk': 4, 'ghg_ratio': 0.274},
        {'pk': 5, 'ghg_ratio': 0.18},
        {'pk': 6, 'ghg_ratio': 0.013},
        {'pk': 7, 'ghg_ratio': 0.013},
        {'pk': 8, 'ghg_ratio': 0.013},
        {'pk': 9, 'ghg_ratio': 0.013},
    ]

    for entry in data:
        energy = Energy.objects.get(pk=entry['pk'])
        energy.ghg_ratio = entry['ghg_ratio']
        energy.save()


# energies.migrations.0018_secondaryefficiency_data
def load_data_0018(apps, schema_editor):
    SecondaryEfficiency = apps.get_model("energies", "SecondaryEfficiency")

    SecondaryEfficiency.objects.bulk_create([
        SecondaryEfficiency(is_heating=True, is_multi_unit=False, ratio=Decimal('0.85')),
        SecondaryEfficiency(is_heating=True, is_multi_unit=True, ratio=Decimal('0.85')),
        SecondaryEfficiency(is_heating=False, is_multi_unit=False, ratio=Decimal('0.874')),
        SecondaryEfficiency(is_heating=False, is_multi_unit=True, ratio=Decimal('0.5')),
    ])
# energies.migrations.0020_energy_price_variation_data
def load_data_0020(apps, schema_editor):

    variations = {
        "oil": 0.047,
        "gaz_b0": 0.0373,
        "gaz_b1": 0.0373,
        "propane": 0.0378,
        "electricity": 0.0302,
        "wood": 0.0274,
        "shredded_wood": 0.0296,
        "bulk_granules": 0.0378,
        "bag_granules": 0.0378,
        "network": 0.02,
    }

    Energy = apps.get_model("energies", "Energy")

    for energy in Energy.objects.all():
        energy.price_variation = variations[energy.identifier]
        energy.save()

# energies.migrations.0022_fix_network_price
def load_data_0022(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    network = Energy.objects.get(identifier="network")

    # Ensure price exists
    energy_price_2019, created = network.yearly_energy_price.get_or_create(year=2019)
    energy_price_2019.price = Decimal("3.65")
    energy_price_2019.save()

    # Setup multi_unit discount
    network.price_multi_unit_discount = Decimal("0.96")
    network.save()

# energies.migrations.0023_fix_enr_ratio_productionsystem_data
def load_data_0023(apps, schema_editor):
    ProductionSystem = apps.get_model("energies", "ProductionSystem")

    ProductionSystem.objects.filter(
        identifier__in=("recent_log_boiler_stove", "granulated_wood_boiler_stove")
    ).update(enr_ratio_hot_water=Decimal("1"))

# energies.migrations.0024_fix_pci_decimal_resolution
def fix_pci_0024(apps, schema_editor):
    EnergyVector = apps.get_model("energies", "EnergyVector")
    EnergyVector.objects.filter(vector='oil_l').update(pci=Decimal('10.384'))

# energies.migrations.0025_fix_propane_energy_vector
def fix_propane_energy_0025(apps, schema_editor):
    EnergyVector = apps.get_model("energies", "EnergyVector")
    Energy = apps.get_model("energies", "Energy")

    propane = Energy.objects.get(identifier="propane")

    EnergyVector.objects.filter(vector__in=("propane_kg", "propane_m3")).update(
        energy=propane
    )
# energies.migrations.0026_fix_secondary_efficiency_ind_hotwater
def fix_secondary_efficiency_0026(apps, schema_editor):
    SecondaryEfficiency = apps.get_model("energies", "SecondaryEfficiency")
    SecondaryEfficiency.objects.filter(is_heating=False, is_multi_unit=False).update(
        ratio=Decimal("0.87")
    )
# energies.migrations.0027_update_energy_prices_2019
def update_energy_prices_0027(apps, schema_editor):
    YearlyEnergyPrice = apps.get_model("energies", "YearlyEnergyPrice")

    energy_prices_2019 = {
        "oil": Decimal("7.65"),
        "propane": Decimal("13.13"),
        "gaz_b1": Decimal("6.79"),
        "electricity": Decimal("15.92"),
        "bulk_granules": Decimal("5.74"),
        "bag_granules": Decimal("6.00"),
        "wood": Decimal("4.20"),
        "shredded_wood": Decimal("3.52"),
        "network": Decimal("3.65"),
    }

    for energy_identifier, energy_price in energy_prices_2019.items():
        YearlyEnergyPrice.objects.filter(
            energy__identifier=energy_identifier, year=2019
        ).update(price=energy_price)


def update_shredded_wood_multi_unit_disount_0027(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    Energy.objects.filter(identifier="shredded_wood").update(
        price_multi_unit_discount=Decimal("0.87")
    )

# energies.migrations.0028_update_energy_price_variation
def update_energy_price_variations_0028(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")

    energy_price_variations = {
        "oil": Decimal("3.46"),
        "propane": Decimal("2.95"),
        "gaz_b1": Decimal("1.32"),
        "electricity": Decimal("2.80"),
        "bulk_granules": Decimal("3.12"),
        "bag_granules": Decimal("3.12"),
        "wood": Decimal("2.73"),
        "shredded_wood": Decimal("2.06"),
        "network": Decimal("2.00"),
    }

    for identifier, price_variation in energy_price_variations.items():
        Energy.objects.filter(
            identifier=identifier
        ).update(price_variation=price_variation)

# energies.migrations.0029_update_energy_price_variation_fixed
def update_energy_price_variations_0029(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")

    energy_price_variations = {
        "oil": Decimal("0.0346"),
        "propane": Decimal("0.0295"),
        "gaz_b1": Decimal("0.0132"),
        "electricity": Decimal("0.0280"),
        "bulk_granules": Decimal("0.0312"),
        "bag_granules": Decimal("0.0312"),
        "wood": Decimal("0.0273"),
        "shredded_wood": Decimal("0.0206"),
        "network": Decimal("0.0200"),
    }

    for identifier, price_variation in energy_price_variations.items():
        Energy.objects.filter(identifier=identifier).update(
            price_variation=price_variation
        )

# energies.migrations.0030_add_thermal_solar
def add_solar_energy_0030(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")

    Energy.objects.create(
        identifier="thermal_solar",
        primary_energy_ratio=Decimal("1"),
        ghg_ratio=Decimal("0"),
        carbon_tax=False,
        combustible_category="renewable",
        price_variation=Decimal("0"),
    )


def remove_solar_energy_0030(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    solar = Energy.objects.filter(identifier="thermal_solar")
    solar.delete()


def add_solar_vectors_0030(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    EnergyVector = apps.get_model("energies", "EnergyVector")

    solar_energy = Energy.objects.get(identifier="thermal_solar")

    EnergyVector.objects.create(
        buying_unit="-", pci=Decimal("1"), unit="kWh", energy=solar_energy, order=10
    )


def remove_solar_vectors_0030(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    EnergyVector = apps.get_model("energies", "EnergyVector")

    solar_energy = Energy.objects.get(identifier="thermal_solar")
    for vector in EnergyVector.objects.filter(energy=solar_energy):
        vector.delete()


def add_solar_production_systems_0030(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    ProductionSystem = apps.get_model("energies", "ProductionSystem")

    solar_energy = Energy.objects.get(identifier="thermal_solar")

    ProductionSystem.objects.create(
        identifier="solar_system_combined",
        is_heating=True,
        is_hot_water=True,
        is_individual=True,
        is_multi_unit=True,
        efficiency_heating=Decimal("1"),
        efficiency_hot_water=Decimal("1"),
        energy=solar_energy,
        is_hydro=True,
        enr_ratio_heating=Decimal("1"),
        enr_ratio_hot_water=Decimal("1"),
        
        investment_individual_heating="1000",
        investment_individual_hot_water="1000",
        investment_small_multi_unit_heating="1000",
        investment_medium_multi_unit_heating="1000",
        investment_large_multi_unit_heating="1000",
        investment_small_multi_unit_hot_water="1000",
        investment_medium_multi_unit_hot_water="1000",
        investment_large_multi_unit_hot_water="1000",

        maintenance_individual_heating="50",
        maintenance_individual_hot_water="50",
        maintenance_small_multi_unit_heating="30",
        maintenance_medium_multi_unit_heating="30",
        maintenance_large_multi_unit_heating="30",
        maintenance_small_multi_unit_hot_water="30",
        maintenance_medium_multi_unit_hot_water="30",
        maintenance_large_multi_unit_hot_water="30",

        provisions_small_multi_unit_heating="20",
        provisions_medium_multi_unit_heating="20",
        provisions_large_multi_unit_heating="20",
        provisions_small_multi_unit_hot_water="20",
        provisions_medium_multi_unit_hot_water="20",
        provisions_large_multi_unit_hot_water="20",
    )
    ProductionSystem.objects.create(
        identifier="solar_water_heater",
        is_heating=False,
        is_hot_water=True,
        is_individual=True,
        is_multi_unit=True,
        efficiency_heating=None,
        efficiency_hot_water=Decimal("1"),
        energy=solar_energy,
        is_hydro=False,
        enr_ratio_heating=None,
        enr_ratio_hot_water=Decimal("1"),

        investment_individual_heating=None,
        investment_individual_hot_water="1300",
        investment_small_multi_unit_heating=None,
        investment_medium_multi_unit_heating=None,
        investment_large_multi_unit_heating=None,
        investment_small_multi_unit_hot_water="1300",
        investment_medium_multi_unit_hot_water="1300",
        investment_large_multi_unit_hot_water="1300",

        maintenance_individual_heating=None,
        maintenance_individual_hot_water="50",
        maintenance_small_multi_unit_heating=None,
        maintenance_medium_multi_unit_heating=None,
        maintenance_large_multi_unit_heating=None,
        maintenance_small_multi_unit_hot_water="30",
        maintenance_medium_multi_unit_hot_water="30",
        maintenance_large_multi_unit_hot_water="30",

        provisions_small_multi_unit_heating=None,
        provisions_medium_multi_unit_heating=None,
        provisions_large_multi_unit_heating=None,
        provisions_small_multi_unit_hot_water="20",
        provisions_medium_multi_unit_hot_water="20",
        provisions_large_multi_unit_hot_water="20",
    )


def remove_solar_production_systems_0030(apps, schema_editor):
    Energy = apps.get_model("energies", "Energy")
    ProductionSystem = apps.get_model("energies", "ProductionSystem")

    solar_energy = Energy.objects.get(identifier="thermal_solar")
    for production_system in ProductionSystem.objects.filter(energy=solar_energy):
        production_system.delete()


class Migration(migrations.Migration):

    replaces = [('energies', '0001_initial'), ('energies', '0002_auto_20190317_1824'), ('energies', '0003_auto_20190430_1356'), ('energies', '0004_fix_energy_and_yearly_price'), ('energies', '0005_energy_add_network'), ('energies', '0006_energyvector'), ('energies', '0007_energyvector_data'), ('energies', '0008_buildingheatingconsumption'), ('energies', '0009_buildingheatingconsumption_data'), ('energies', '0010_productionsystem'), ('energies', '0011_productionsystem_data'), ('energies', '0012_energy_combustible_category'), ('energies', '0013_energy_add_combustible_category'), ('energies', '0014_carbontax'), ('energies', '0015_carbontax_data'), ('energies', '0016_energy_update_ghg_ratio'), ('energies', '0017_secondaryefficiency'), ('energies', '0018_secondaryefficiency_data'), ('energies', '0019_energy_price_variation'), ('energies', '0020_energy_price_variation_data'), ('energies', '0021_energy_price_multi_unit_discount'), ('energies', '0022_fix_network_price'), ('energies', '0023_fix_enr_ratio_productionsystem_data'), ('energies', '0024_fix_pci_decimal_resolution'), ('energies', '0025_fix_propane_energy_vector'), ('energies', '0026_fix_secondary_efficiency_ind_hotwater'), ('energies', '0027_update_energy_prices_2019'), ('energies', '0028_update_energy_price_variation'), ('energies', '0029_update_energy_price_variation_fixed'), ('energies', '0030_add_thermal_solar')]

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Energy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('identifier', models.CharField(max_length=30, verbose_name="Identifiant d'énergie")),
                ('primary_energy_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[validation_absolute_positive], verbose_name="Ratio d'énergie primaire")),
                ('ghg_ratio', models.DecimalField(decimal_places=10, max_digits=20, validators=[validation_absolute_positive], verbose_name='Ratio gaz à effet de serre')),
                ('carbon_tax', models.BooleanField(default=False, verbose_name='Assujeti à la taxe carbone ?')),
                ('pci_ratio', models.PositiveSmallIntegerField(null=True, validators=[validation_absolute_positive], verbose_name='Ratio de pouvoir calorifique inférieur')),
                ('density_ratio', models.DecimalField(decimal_places=10, max_digits=20, null=True, validators=[validation_absolute_positive], verbose_name='Ratio de densité')),
            ],
            options={
                'verbose_name': 'Énergie',
            },
        ),
        migrations.CreateModel(
            name='YearlyEnergyPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('year', models.PositiveSmallIntegerField(verbose_name='Année')),
                ('price', models.DecimalField(decimal_places=2, max_digits=20, null=True, validators=[validation_absolute_positive], verbose_name='Prix')),
                ('energy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='yearly_energy_price', to='energies.Energy', verbose_name='Énergie')),
            ],
            options={
                'verbose_name': 'Prix des énergies par année',
                'unique_together': {('year', 'energy')},
            },
        ),
        migrations.RunPython(
            code=load_fixture_0002,
            reverse_code=unload_fixture_0002,
        ),
        migrations.AlterField(
            model_name='energy',
            name='created_at',
            field=models.DateTimeField(default=django.utils.timezone.now, editable=False),
        ),
        migrations.AlterField(
            model_name='yearlyenergyprice',
            name='created_at',
            field=models.DateTimeField(default=django.utils.timezone.now, editable=False),
        ),
        migrations.AlterField(
            model_name='energy',
            name='identifier',
            field=models.CharField(choices=[('oil', 'Fioul'), ('gaz_b0', 'Gaz B0'), ('gaz_b1', 'Gaz B1'), ('propane', 'Propane'), ('electricity', 'Électricité'), ('wood', 'Bois'), ('shredded_wood', 'Bois déchiqueté'), ('bulk_granules', 'Bois granulés en vrac'), ('bag_granules', 'Bois granulés en sac'), ('network', 'Réseau')], max_length=30, unique=True, verbose_name="Identifiant d'énergie"),
        ),
        migrations.AlterField(
            model_name='energy',
            name='density_ratio',
            field=models.DecimalField(decimal_places=10, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(Decimal('1'))], verbose_name='Ratio de densité'),
        ),
        migrations.AlterField(
            model_name='energy',
            name='ghg_ratio',
            field=models.DecimalField(decimal_places=10, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('1'))], verbose_name='Ratio gaz à effet de serre'),
        ),
        migrations.AlterField(
            model_name='energy',
            name='pci_ratio',
            field=models.PositiveSmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(Decimal('1'))], verbose_name='Ratio de pouvoir calorifique inférieur'),
        ),
        migrations.AlterField(
            model_name='energy',
            name='primary_energy_ratio',
            field=models.DecimalField(decimal_places=10, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('1'))], verbose_name="Ratio d'énergie primaire"),
        ),
        migrations.AlterField(
            model_name='yearlyenergyprice',
            name='price',
            field=models.DecimalField(decimal_places=2, max_digits=20, null=True, validators=[django.core.validators.MinValueValidator(Decimal('1'))], verbose_name='Prix'),
        ),
        migrations.RunPython(
            code=add_energy_type_0005,
            reverse_code=reverse_add_energy_type_0005,
        ),
        migrations.CreateModel(
            name='EnergyVector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('vector', models.CharField(choices=[('oil_kg', 'fioul acheté au kg'), ('oil_l', 'fioul acheté au litre'), ('oil_kwh', 'fioul au kWh'), ('propane_kg', 'propane acheté au kg'), ('propane_m3', 'Propane acheté au m³'), ('propane_bottles', 'propane acheté en bouteilles de 13 kg'), ('propane_kwh', 'propane en kWh'), ('natural_gaz_m3', 'gaz naturel au m3'), ('natural_gaz_kwh', 'gaz naturel au kWh'), ('electricity_kwh', 'Electricité'), ('rcu_kwh', 'RCU (réseau de chaleur urbain)'), ('wood_logs_stere', 'bûches'), ('granules_t', 'granulés en vrac'), ('granules_bag', 'granulés en sac'), ('shredded_wood_t', 'bois déchiqueté à la tonne'), ('shredded_wood_map', 'bois déchiqueté au MAP'), ('shredded_wood_kwh', 'bois déchiqueté au kWh')], max_length=30, unique=True, verbose_name='Vecteur énergétique')),
                ('buying_unit', models.CharField(max_length=200, verbose_name="Unité d'achat")),
                ('unit', models.CharField(max_length=200, verbose_name='Unité')),
                ('pci', models.DecimalField(decimal_places=2, default=0, max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Pouvoir calorifique inférieur en kWh/unité')),
                ('order', models.IntegerField(db_index=True, default=0, verbose_name="Ordre d'affichage")),
                ('energy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='vectors', to='energies.Energy', verbose_name="Type d'énergie")),
            ],
            options={
                'verbose_name': "Vecteurs d'énergie",
            },
        ),
        migrations.RunPython(
            code=load_data_0007,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name='BuildingHeatingConsumption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('criterion', models.CharField(choices=[('before_1948', 'Avant 1948'), ('between_1948_1974', 'Entre 1948 et 1974'), ('between_1975_1982', 'Entre 1975 et 1982'), ('between_1983_1988', 'Entre 1983 et 1988'), ('between_1989_2000', 'Entre 1989 et 2000'), ('between_2001_2005', 'Entre 2001 et 2005'), ('between_2006_2012', 'Entre 2006 et 2012'), ('after_2012', 'Après 2012'), ('bbc', 'Bâtiment BBC'), ('passive', 'Bâtiment passif')], max_length=30, unique=True, verbose_name='Critère')),
                ('heating_consumption', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Consommation de chauffage en kWh/m²')),
                ('comment', models.CharField(blank=True, default='', max_length=50, verbose_name='Commentaire')),
                ('order', models.IntegerField(db_index=True, default=0, verbose_name="Ordre d'affichage")),
            ],
            options={
                'verbose_name': 'Consommation en chauffage',
            },
        ),
        migrations.RunPython(
            code=load_data_0009,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name='ProductionSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('identifier', models.CharField(choices=[('oil_boiler_standard', 'Chaudière fioul standard'), ('oil_boiler_condensing', 'Chaudière fioul condensation'), ('gaz_boiler_standard', 'Chaudière gaz standard'), ('gaz_boiler_condensing', 'Chaudière gaz condensation'), ('propane_boiler_standard', 'Chaudière propane standard'), ('propane_boiler_condensing', 'Chaudière propane condensation'), ('electric_boiler', 'Chaudière électrique'), ('electric_radiators', 'Radiateurs électriques'), ('heat_pump_air_air', 'PAC air/air'), ('heat_pump_air_water', 'PAC air/eau '), ('heat_pump_geothermal_lte', 'PAC géothermale avec émetteurs basse température'), ('heat_pump_geothermal_vlte', 'PAC géothermale avec émetteurs très basse température'), ('thermodynamic_cmv', 'VMC thermodynamique'), ('log_stove', 'Poêle à bûches récent'), ('granulated_wood_stove', 'Poêle à bois granulés'), ('granulated_wood_boiler', 'Chaudière à bois granulés'), ('log_boiler', 'Chaudière à bûches'), ('shredded_wood_boiler', 'Chaudière à bois déchiqueté'), ('recent_log_boiler_stove', 'Poêle à bûches récent bouilleur'), ('granulated_wood_boiler_stove', 'Poêle à bois granulés bouilleur'), ('electric_water_heater', 'Chauffe-eau électrique'), ('ceti_outside_air', 'CETI sur air extérieur'), ('ceti_inside_air', 'CETI sur air intérieur'), ('ceti_extracted_air', 'CETI sur air extrait'), ('heat_pump_using_waste_heat', 'PAC valorisant une chaleur perdue (eaux grises etc.)'), ('heating_network', 'RCU (Réseau de Chaleur Urbain)')], max_length=50, unique=True, verbose_name='Identifiant')),
                ('is_heating', models.BooleanField(default=False, verbose_name='Pour le chauffage ?')),
                ('is_hot_water', models.BooleanField(default=False, verbose_name="Pour l'eau chaude ?")),
                ('is_individual', models.BooleanField(default=False, verbose_name='Pour le logement individuel ?')),
                ('is_multi_unit', models.BooleanField(default=False, verbose_name='Pour le logement collectif ?')),
                ('is_hydro', models.BooleanField(default=False, verbose_name='Émission hydrolique centralisée ?')),
                ('efficiency_heating', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Rendement ou COP du chauffage')),
                ('efficiency_hot_water', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name="Rendement ou COP de l'eau chaude")),
                ('enr_ratio_heating', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('1'))], verbose_name="Taux d'ENR du chauffage")),
                ('enr_ratio_hot_water', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('1'))], verbose_name="Taux d'ENR de l'eau chaude")),
                ('investment_individual_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Investissement pour le chauffage - logement individuel')),
                ('investment_individual_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Investissement pour l'eau chaude - logement individuel")),
                ('maintenance_individual_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maintenance annuelle pour le chauffage - logement individuel')),
                ('maintenance_individual_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Maintenance annuelle pour l'eau chaude' - logement individuel")),
                ('investment_small_multi_unit_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Investissement pour le chauffage - logement collectif petit')),
                ('investment_small_multi_unit_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Investissement pour l'eau chaude - logement collectif petit")),
                ('maintenance_small_multi_unit_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maintenance annuelle pour le chauffage - logement collectif petit')),
                ('maintenance_small_multi_unit_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Maintenance annuelle pour l'eau chaude - logement collectif petit")),
                ('provisions_small_multi_unit_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Provisions pour grosses réparations pour le chauffage - logement collectif petit')),
                ('provisions_small_multi_unit_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Provisions pour grosses réparations pour l'eau chaude - logement collectif petit")),
                ('investment_medium_multi_unit_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Investissement pour le chauffage - logement collectif moyen')),
                ('investment_medium_multi_unit_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Investissement pour l'eau chaude - logement collectif moyen")),
                ('maintenance_medium_multi_unit_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maintenance annuelle pour le chauffage - logement collectif moyen')),
                ('maintenance_medium_multi_unit_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Maintenance annuelle pour l'eau chaude - logement collectif moyen")),
                ('provisions_medium_multi_unit_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Provisions pour grosses réparations pour le chauffage - logement collectif moyen')),
                ('provisions_medium_multi_unit_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Provisions pour grosses réparations pour l'eau chaude - logement collectif moyen")),
                ('investment_large_multi_unit_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Investissement pour le chauffage - logement collectif grand')),
                ('investment_large_multi_unit_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Investissement pour l'eau chaude - logement collectif grand")),
                ('maintenance_large_multi_unit_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Maintenance annuelle pour le chauffage - logement collectif grand')),
                ('maintenance_large_multi_unit_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Maintenance annuelle pour l'eau chaude - logement collectif grand")),
                ('provisions_large_multi_unit_heating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Provisions pour grosses réparations pour le chauffage - logement collectif grand')),
                ('provisions_large_multi_unit_hot_water', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Provisions pour grosses réparations pour l'eau chaude - logement collectif grand")),
                ('energy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='production_systems', to='energies.Energy', verbose_name="Type d'énergie")),
            ],
            options={
                'verbose_name': "Système de production d'énergie",
            },
        ),
        migrations.RunPython(
            code=load_data_0011,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='energy',
            name='combustible_category',
            field=models.CharField(choices=[('fossil', 'Fossile'), ('electricity', 'Électricité'), ('renewable', 'Renouvelable')], default='fossil', max_length=30, verbose_name='Catégorie de combustible'),
        ),
        migrations.RunPython(
            code=load_data_0013,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name='CarbonTax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(2018)], verbose_name='Année')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('1'))], verbose_name='Montant HT / tCO2')),
            ],
            options={
                'verbose_name': 'Taxe carbone',
            },
        ),
        migrations.RunPython(
            code=load_data_0015,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_data_0016,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name='SecondaryEfficiency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', core.models.AutoDateTimeField(default=django.utils.timezone.now, editable=False)),
                ('is_heating', models.BooleanField(default=False, verbose_name='Chauffage ?')),
                ('is_multi_unit', models.BooleanField(default=False, verbose_name='Collectif ?')),
                ('ratio', models.DecimalField(decimal_places=10, default=0, max_digits=13, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Ratio')),
            ],
            options={
                'verbose_name': 'Rendement secondaire',
            },
        ),
        migrations.RunPython(
            code=load_data_0018,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='energy',
            name='price_variation',
            field=models.DecimalField(decimal_places=5, default=0, max_digits=6, verbose_name='Variation du prix depuis 2002'),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=load_data_0020,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='energy',
            name='price_multi_unit_discount',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.85'), max_digits=3, verbose_name='Ratio appliqué sur le prix pour logement collectifs'),
        ),
        migrations.RunPython(
            code=load_data_0022,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=load_data_0023,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='energyvector',
            name='pci',
            field=models.DecimalField(decimal_places=4, default=0, max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Pouvoir calorifique inférieur en kWh/unité'),
        ),
        migrations.RunPython(
            code=fix_pci_0024,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=fix_propane_energy_0025,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=fix_secondary_efficiency_0026,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_energy_prices_0027,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_shredded_wood_multi_unit_disount_0027,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_energy_price_variations_0028,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_energy_price_variations_0029,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='energy',
            name='identifier',
            field=models.CharField(choices=[('oil', 'Fioul'), ('gaz_b0', 'Gaz B0'), ('gaz_b1', 'Gaz B1'), ('propane', 'Propane'), ('electricity', 'Électricité'), ('wood', 'Bois'), ('shredded_wood', 'Bois déchiqueté'), ('bulk_granules', 'Bois granulés en vrac'), ('bag_granules', 'Bois granulés en sac'), ('network', 'Réseau'), ('thermal_solar', 'Solaire thermique')], max_length=30, unique=True, verbose_name="Identifiant d'énergie"),
        ),
        migrations.AlterField(
            model_name='productionsystem',
            name='identifier',
            field=models.CharField(choices=[('oil_boiler_standard', 'Chaudière fioul standard'), ('oil_boiler_condensing', 'Chaudière fioul condensation'), ('gaz_boiler_standard', 'Chaudière gaz standard'), ('gaz_boiler_condensing', 'Chaudière gaz condensation'), ('propane_boiler_standard', 'Chaudière propane standard'), ('propane_boiler_condensing', 'Chaudière propane condensation'), ('electric_boiler', 'Chaudière électrique'), ('electric_radiators', 'Radiateurs électriques'), ('heat_pump_air_air', 'PAC air/air'), ('heat_pump_air_water', 'PAC air/eau '), ('heat_pump_geothermal_lte', 'PAC géothermale avec émetteurs basse température'), ('heat_pump_geothermal_vlte', 'PAC géothermale avec émetteurs très basse température'), ('thermodynamic_cmv', 'VMC thermodynamique'), ('log_stove', 'Poêle à bûches récent'), ('granulated_wood_stove', 'Poêle à bois granulés'), ('granulated_wood_boiler', 'Chaudière à bois granulés'), ('log_boiler', 'Chaudière à bûches'), ('shredded_wood_boiler', 'Chaudière à bois déchiqueté'), ('recent_log_boiler_stove', 'Poêle à bûches récent bouilleur'), ('granulated_wood_boiler_stove', 'Poêle à bois granulés bouilleur'), ('electric_water_heater', 'Chauffe-eau électrique'), ('ceti_outside_air', 'CETI sur air extérieur'), ('ceti_inside_air', 'CETI sur air intérieur'), ('ceti_extracted_air', 'CETI sur air extrait'), ('heat_pump_using_waste_heat', 'PAC valorisant une chaleur perdue (eaux grises etc.)'), ('heating_network', 'RCU (Réseau de Chaleur Urbain)'), ('solar_system_combined', 'Système Solaire Combiné'), ('solar_water_heater', 'Chauffe-eau Solaire')], max_length=50, unique=True, verbose_name='Identifiant'),
        ),
        migrations.RunPython(
            code=add_solar_energy_0030,
            reverse_code=remove_solar_energy_0030,
        ),
        migrations.RunPython(
            code=add_solar_vectors_0030,
            reverse_code=remove_solar_vectors_0030,
        ),
        migrations.RunPython(
            code=add_solar_production_systems_0030,
            reverse_code=remove_solar_production_systems_0030,
        ),
    ]
